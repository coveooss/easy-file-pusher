name: Publish the Easy File Pusher tool.

on:
  push:
    branches: [ master ]
# Just testing for the PR.
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  linux-mac-windows:
    runs-on: windows-latest
    steps:

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 3.1.101

    - name: Restore tools
      run: dotnet tool restore

    - name: Create variables for version
      id: nbgv
      shell: bash
      run: echo "SemVer2=$(dotnet nbgv get-version --variable NuGetPackageVersion)" >> $GITHUB_OUTPUT

    - name: Verify variable
      run: echo "SemVer2=${{ steps.nbgv.outputs.SemVer2 }}"

    - name: Build
      working-directory: ./src
      run: dotnet build --configuration Release

    - name: Create Publish directory
      working-directory: .
      run: mkdir ./publish

    - name: Create LinuxX64 Zip
      working-directory: ./src
      shell: powershell
      run: |
        dotnet publish -p:PublishProfile=LinuxX64 --configuration Release
        $files=Get-ChildItem -Path ./../bin/Release/netcoreapp3.1/publish/LinuxX64 -Exclude *.pdb
        echo ${files}
        $compress = @{
          Path = $files
          CompressionLevel = "Fastest"
          DestinationPath = "./../publish/Coveo.Connectors.EasyFilePusher_LinuxX64.zip"
          }
        Compress-Archive @compress

    - name: Create  MacOsx64 Zip
      working-directory: ./src
      shell: powershell
      run: |
        dotnet publish -p:PublishProfile=MacOsx64 --configuration Release
        $files=Get-ChildItem -Path ./../bin/Release/netcoreapp3.1/publish/MacOsx64 -Exclude *.pdb
        echo ${files}
        $compress = @{
          Path = $files
          CompressionLevel = "Fastest"
          DestinationPath = "./../publish/Coveo.Connectors.EasyFilePusher_MacOsx64.zip"
          }
        Compress-Archive @compress

    - name: Build WinX86 EXE
      working-directory: ./src
      run: dotnet publish -p:PublishProfile=WinX86 --configuration Release

    - name: Prepare Windows certificate 1/2
      id: write_pem_file
      shell: bash
      run: |
        # Decode the certificate and write it to a file
        echo "${{ secrets.WINDOWS_CERT }}" | base64 --decode > cert.pem
        ls

    - name: Prepare Windows certificate 2/2
      working-directory: .
      run: CMD /r openssl pkcs12 -in cert.pem -export -out cert.pfx -passin pass:"${{ secrets.WINDOWS_CERT_PWD }}" -passout pass:"${{ secrets.WINDOWS_CERT_PWD }}"

    - name: Sign Windows executable
      working-directory: .
      run: |
        "C:\Program Files (x86)\Windows Kits\10\bin\x86\signtool.exe" sign /f cert.pfx /p ${{ secrets.WINDOWS_CERT_PWD }} bin\Release\netcoreapp3.1\publish\WinX86\Coveo.Connectors.EasyFilePusher.exe

    - name: Delete Windows temp certificate 1/2
      working-directory: .
      run: DEL cert.pfx

    - name: Delete Windows temp certificate 2/2
      working-directory: .
      run: DEL cert.pem

    - name: Create Windows Zip
      working-directory: ./publish
      run: |
        Compress-Archive .\..\bin\Release\netcoreapp3.1\publish\WinX86\Coveo.Connectors.EasyFilePusher.exe Coveo.Connectors.EasyFilePusher_WinX86.zip
        ls

    # Publish Github Release
    - name: Create release
      if: ${{ github.event_name == 'push' }}
      working-directory: ./publish
      run: gh release create v${{ steps.nbgv.outputs.SemVer2 }} --generate-notes --target $GITHUB_SHA ./*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}